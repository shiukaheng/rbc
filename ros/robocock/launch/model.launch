<?xml version="1.0"?>
<launch>
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find robocock)/description/robot.urdf.xacro" />

    <!-- We don't actually need joint_state_publisher as it is only meant to be used for mockup robots, the RobotHW also publishes the sensor data -->

    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="False"/>
    </node> -->

    <!-- Robot state publisher on the other hand takes in the joint data to compute the TFs -->

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <!-- Wheel Control -->
    <node pkg="rosserial_arduino" type="serial_node.py" name="rosserial_node" output="screen">
        <param name="port" value="/dev/ttyACM0" />
        <param name="baud" value="57600" />
    </node>
    <!-- Wheel parameter server (Custom node to easily set PID parameters using rosparam, 
    as well as switching on the fly with rostopics) -->
    <node pkg="robocock" type="control_parameter_server" name="control_parameter_server" output="screen">
        <!-- <rosparam>
            wheel1_p: 0.01
            wheel1_i: 0.025
            wheel1_d: 0.0
            wheel2_p: 0.01
            wheel2_i: 0.025
            wheel2_d: 0.0
            wheel3_p: 0.01
            wheel3_i: 0.025
            wheel3_d: 0.0
            wheel4_p: 0.01
            wheel4_i: 0.025
            wheel4_d: 0.0
            regular_update_rate: 5
        </rosparam> -->
        <rosparam>
            wheel1_p: 40
            wheel1_i: 0.01
            wheel1_d: 0.0
            wheel2_p: 40
            wheel2_i: 0.01
            wheel2_d: 0.0
            wheel3_p: 40
            wheel3_i: 0.01
            wheel3_d: 0.0
            wheel4_p: 40
            wheel4_i: 0.01
            wheel4_d: 0.0
            regular_update_rate: 5
        </rosparam>
    </node>
    <!-- ros_control server, provide ControllerManager which allows controller 
    plugins (in this case our custom OmniwheelBaseController) to access them -->
    <node pkg="robocock" type="robocock_hw" name="robocock_hw" output="screen"/>
    <!-- rosparam configuration required to tell ros_control that OmniwheelBaseController is the controller we will use -->
    <rosparam file="$(find robocock)/config/controller.yaml" command="load"/>
    <!-- Load the controller -->
    <node pkg="controller_manager" type="spawner" name="controller_spawner" output="screen"
        args="robocock/OmniwheelBaseController"/>
    <!-- Debug GUI -->
    <node pkg="rqt_gui" type="rqt_gui" name="rqt_gui" output="screen" respawn="false" args="--perspective-file $(find robocock)/config/model.perspective" launch-prefix="bash -c 'sleep 5; $0 $@'"/>
    <!-- Rviz with robocock/config/motor_ros_control.rviz -->
    <node pkg="rviz" type="rviz" name="rviz" output="screen" respawn="false" args="-d $(find robocock)/config/motor_ros_control.rviz"/>

</launch>